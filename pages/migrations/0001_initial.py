# Generated by Django 3.1.1 on 2022-02-01 01:30

from django.db import migrations, models
import django.db.models.deletion
import pages.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.SlugField(help_text='ID of page', primary_key=True, serialize=False)),
                ('embedded', models.BooleanField(default=False, help_text='If checked, the page cannot be viewed through the URL. Used for pages that are embedded into complex pages like the frontpage.')),
                ('title', models.CharField(help_text='Title is shown in browser window. Use a good informative title, since search engines normally display the title on their result pages.', max_length=200, verbose_name='Title')),
                ('content', models.TextField(blank=True, verbose_name='Content')),
                ('script', models.TextField(blank=True, help_text='Javascript to be included in page footer', verbose_name='script')),
                ('description', models.TextField(blank=True, help_text='The metadata description is normally shown in search engine results, making the description an effective way of capturing users attention. Description should be a clear description of the content and less the 200 characters long. Also used when sharing page on social media', verbose_name='Description')),
                ('keywords', models.TextField(blank=True, help_text='Comma-separated list of keywords for this page. Mainly used internally as search engines rarely use keywords to rank pages.', verbose_name='Keywords')),
                ('opengraph_image', models.CharField(blank=True, help_text="Example: 'https://www.eso.org/public/archives/imagecomparisons/newsfeature/potw1413a.jpg'. If given: full path to an image that will be used when sharing the page on social media. Must be larger than 200x200px and smaller than 5MB.", max_length=250, verbose_name='OpenGraph Image')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('published', models.BooleanField(default=True, help_text='If this is unchecked, the page will not be viewable online. Timed publishing of published pages, can be controlled by the start/end publishing fields.', verbose_name='Published')),
                ('start_publishing', models.DateTimeField(blank=True, help_text='Leave blank to publish immediately. The field only has effect for published pages (see above).', null=True)),
                ('end_publishing', models.DateTimeField(blank=True, help_text='Leave blank for open-ended publishing. The field only has effect for published pages (see above).', null=True)),
                ('template_name', pages.models.TemplateField(blank=True, help_text='Override the template specified by the section.', max_length=100)),
                ('login_required', models.BooleanField(default=False, help_text='If checked, only logged-in users will be able to view the page.')),
                ('dynamic', models.BooleanField(default=False, help_text='If checked, page will not be cached. Use with care!')),
                ('raw_html', models.BooleanField(default=False, help_text='If checked the WYSIWYG editor will be disabled, useful for editing pages with javascript.')),
                ('live_edit', models.BooleanField(default=True, help_text="Allow Live edit (only if the page doesn't use javascript, embed, etc.)")),
                ('redirect_url', models.CharField(blank=True, db_index=True, help_text="Example: 'https://www.eso.org/public/'. Used if the page has been permanently moved. If given, access to the page will trigger a HTTP 301 redirection to the given URL.", max_length=200, verbose_name='Redirect URL')),
            ],
            options={
                'ordering': ['title'],
                'permissions': (('can_view_inactive', 'Can view inactive pages'), ('view_elt_pages_only', 'Can view only ELT pages')),
            },
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('template', pages.models.TemplateField(max_length=100)),
                ('append_title', models.CharField(max_length=100)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='URL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.CharField(db_index=True, help_text="Example: '/about/contact/'. Make sure to have leading and trailing slashes. Good and descriptive URLs are important for good user experience and search engine ranking.", max_length=200, unique=True, verbose_name='URL')),
                ('page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='pages.page', verbose_name='Page')),
            ],
        ),
        migrations.CreateModel(
            name='PageGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the group', max_length=50, verbose_name='Name')),
                ('description', models.TextField(blank=True, help_text='Description of group', verbose_name='Description')),
                ('full_access', models.BooleanField(default=False, help_text='If checked members of this group have access to all pages')),
                ('groups', models.ManyToManyField(blank=True, help_text='Groups which have to access to this page group', to='auth.Group', verbose_name='Group')),
            ],
        ),
        migrations.AddField(
            model_name='page',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='PageGroup the Page belongs to, used for access restriction.', to='pages.PageGroup'),
        ),
        migrations.AddField(
            model_name='page',
            name='section',
            field=models.ForeignKey(default=1, help_text='Determines e.g. which templates to use for rendering the template.', on_delete=django.db.models.deletion.CASCADE, to='pages.section'),
        ),
        migrations.CreateModel(
            name='EmbeddedPageKey',
            fields=[
                ('application', models.CharField(max_length=255)),
                ('page_key', models.SlugField(primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='Meaningful title for embedded ', max_length=255)),
                ('description', models.TextField(blank=True, help_text='Description of where the page is being embedded and if there is any special considerations to take - e.g. page length etc.')),
                ('last_modified', models.DateTimeField(auto_now=True)),
                ('page', models.ForeignKey(blank=True, help_text='Select page that you want to use for the specific key. Note, only pages marked as embedded pages can be selected.', limit_choices_to={'embedded__exact': True}, null=True, on_delete=django.db.models.deletion.CASCADE, to='pages.page')),
            ],
            options={
                'verbose_name': 'Page Embedding',
            },
        ),
    ]
